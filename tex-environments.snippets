
# tex-environments.snippets
# Built by tbrazel/latex-templates

global !p

# Checks if a string is a backslash. Used in snippets where you want to expand after a backslash
def isbackslash(string):
    if string == '\\':
	    return ''
    return string

def isMath():
    return int(vim.eval('vimtex#syntax#in_mathzone()')) > 0

def prose():
	return not isMath()
envs = {
'algo':'algorithm',
'ans':'answer',
'assump':'assumption',
'cla':'claim',
'comp':'computation',
'conj':'conjecture',
'cor':'corollary',
'cex':'counterexample',
'code':'codeblock',
'data':'data',
'dig':'digression',
'disc':'discussion',
'def':'definition',
'exa':'example',
'exs':'examples',
'exer':'exercise',
'fac':'fact',
'goal':'goal',
'intu':'intuition',
'lem':'lemma',
'meta':'metathm',
'motiv':'motivation',
'nota':'notation',
'note':'note',
'obs':'observation',
'prop':'proposition',
'ques':'question',
'rmk':'remark',
'set':'setup',
'slo':'slogan',
'term':'terminology',
'thm':'theorem',
'upsh':'upshot',
'warn':'warning',
'wish':'wishlist',
}

def longname(string):
	if string in envs:
		return envs[string]
	else:
		return 'ERR'

# Flip the keys and values for the envs dictionary
flippedenvs = dict((v,k) for k,v in envs.items())


def shortname(string):
	if string in flippedenvs:
		return flippedenvs[string]
	else:
		return 'ERR'

endglobal
###############

context "prose()"
snippet '(algo|ans|assump|cla|comp|conj)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '(cor|cex|code|data|dig|disc)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '(def|exa|exs|exer|fac|goal)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '(intu|lem|meta|motiv|nota|note)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '(obs|prop|ques|rmk|set|slo)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '(term|thm|upsh|warn|wish)' "env" brA
\begin{`!p snip.rv = longname(match.group(1))`} $1
\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

context "prose()"
snippet '\\begin{(algorithm|answer|assumption|claim|computation|conjecture)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

context "prose()"
snippet '\\begin{(corollary|counterexample|codeblock|data|digression|discussion)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

context "prose()"
snippet '\\begin{(definition|example|examples|exercise|fact|goal)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

context "prose()"
snippet '\\begin{(intuition|lemma|metathm|motivation|notation|note)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

context "prose()"
snippet '\\begin{(observation|proposition|question|remark|setup|slogan)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

context "prose()"
snippet '\\begin{(terminology|theorem|upshot|warning|wishlist)}(\s*)' "env" br
\\begin{`!p snip.rv = match.group(1)`}\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet


# vim:ft=snippets: