# This file contains snippets for typesetting LaTeX
#

global !p

# Checks if a string is a backslash. Used in snippets where you want to expand after a backslash
def isbackslash(string):
    if string == '\\':
	    return ''
    return string

def isMath():
    return int(vim.eval('vimtex#syntax#in_mathzone()')) > 0

def prose():
	return not isMath()


envs = {
'ans':'answer',
'assump':'assumption',
'cla':'claim',
'conj':'conjecture',
'cor':'corollary',
'cex':'counterexample',
'code':'codeblock',
'data':'data',
'dig':'digression',
'disc':'discussion',
'def':'definition',
'ex':'example',
'exs':'examples',
'fac':'fact',
'intu':'intuition',
'lem':'lemma',
'meta':'metathm',
'nota':'notation',
'note':'note',
'prop':'proposition',
'rmk':'remark',
'term':'terminology',
'thm':'theorem',
'upsh':'upshot',
'warn':'warn',
}



# Short name regex:
# (ans|assump|cla|conj|cor|cex|code|data|dig|disc|def|ex|exs|fac|intu|lem|meta|nota|note|prop|rmk|term|thm|upsh|warn)
# Long name regex:
# (answer|assumption|claim|conjecture|corollary|counterexample|codeblock|data|digression|discussion|definition|example|examples|fact|intuition|lemma|metathm|notation|note|proposition|remark|terminology|theorem|upshot|warning)


def longname(string):
	if string in envs:
		return envs[string]
	
	else:
		return 'ERR'


# Flip the keys and values for the envs dictionary
flippedenvs = dict((v,k) for k,v in envs.items())


def shortname(string):
	if string in flippedenvs:
		return flippedenvs[string]
	
	else:
		return 'ERR'





endglobal

###################################
# Theorem environments

# Env at start of a new line
context "prose()"
snippet '(ans|assump|cla|conj|cor|cex|code|data|dig|disc|def|ex|exs|fac|intu|lem|meta|nota|note|prop|rmk|term|thm|upsh|warn)' "env" brA
\\begin{`!p snip.rv = longname(match.group(1))`} $1
\\end{`!p snip.rv = longname(match.group(1))`}
$0
endsnippet

# Match beginning of env with optional space right after
# Usage: typing something like 'cor' at the beginning of a new line will automatically expand the snippet above. The idea is that, before typing anything new, you can hit tab again and it will create a label for the theorem environment, with the short name of the theorem prepended, so that the label will be accessible to autoref/cleveref
snippet '\\begin{(answer|assumption|claim|conjecture|corollary|counterexample|codeblock|data|digression|discussion|definition|example|examples|fact|intuition|lemma|metathm|notation|note|proposition|remark|terminology|theorem|upshot|warning)}( |)' "label" br
\\begin{`!p snip.rv = match.group(1)`}\\label{`!p snip.rv = shortname(match.group(1))`:$1} $0
endsnippet

# For other environments
context "prose()"
snippet beg "begin{} / end{}" bA
\\begin{$1} $0
\\end{$1}
endsnippet

context "prose()"
snippet center "centering"
\\begin{center}
	$1
\\end{center}
$0
endsnippet

context "prose()"
snippet eqn "equation" bA
\\begin{equation}\\label{eqn:$1}
\\begin{aligned}
    $2
\\end{aligned}
\\end{equation}
$0
endsnippet

context "prose()"
snippet fig "include figure" b
\\begin{figure}[h]
  \\includegraphics[width=\\linewidth]{${1:Filename}}
  \\centering
  \\caption{${2:Caption}}
  \\label{fig:${3:Label Name}}
\\end{figure}
$0
endsnippet

context "prose()"
snippet ink "inkscape figure" b
\\begin{figure}[ht]
    \\centering
    \\incfig{$1}
    \\caption{$2}
    \\label{fig:$3}
\\end{figure}
endsnippet

context "prose()"
snippet iz "Itemize" bA
\\begin{itemize}
	\\item $1
\\end{itemize}
$0
endsnippet

context "prose()"
snippet pf "proof" bA
\\begin{proof} $1
\\end{proof}
$0
endsnippet

snippet tabular "tabular" b
\\begin{center}
    \\begin{tabular}{$1}
    
    \\end{tabular}
\\end{center}
endsnippet

###################################

# Preamble commands

context "prose()"
snippet '(\\|^)newc' "new command" r
`!p snip.rv = isbackslash(match.group(1))`\\newcommand{$1}{$0}
endsnippet

context "prose()"
snippet '(\\|^)prov' "provide command" r
`!p snip.rv = isbackslash(match.group(1))`\\providecommand{$1}{$0}
endsnippet

context "prose()"
snippet '(\\|^)renewc' "renewcommand" r
`!p snip.rv = isbackslash(match.group(1))`\\renewcommand{$1}{$0}
endsnippet

context "prose()"
snippet tc "text command" b
\\providecommand{\\$1}{\\text{$1}}
endsnippet

snippet '(\\|^)usep' "Package" br
`!p snip.rv = isbackslash(match.group(1))`\\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet




###################################
# Beamer commands

snippet frame "Frame beamer" b
\\begin{frame}{$1}
$2
\\end{frame}
$0
endsnippet


# vim:ft=snippets:
